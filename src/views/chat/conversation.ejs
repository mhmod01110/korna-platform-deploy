<%- contentFor('body') %>

<div class="container py-4" data-conversation-id="<%= conversation._id %>" data-current-user-id="<%= user ? user._id : '' %>">
	<div class="card">
		<div class="card-header d-flex justify-content-between align-items-center">
			<h5 class="mb-0">Chat with <%= peerUser.firstName %> <%= peerUser.lastName %></h5>
			<small class="text-muted" id="last-updated"></small>
		</div>
		<div class="card-body" id="message-list" style="height: 50vh; overflow-y: auto; background: #f8f9fa;"></div>
		<div class="card-footer">
			<form id="message-form">
				<div class="input-group">
					<input type="text" class="form-control" id="message-input" placeholder="Type a message" autocomplete="off" required />
					<button class="btn btn-primary" type="submit">Send</button>
				</div>
			</form>
		</div>
	</div>
</div>

<script>
(() => {
	const container = document.querySelector('[data-conversation-id]');
	const conversationId = container.getAttribute('data-conversation-id');
	const currentUserId = container.getAttribute('data-current-user-id');
	const list = document.getElementById('message-list');
	const form = document.getElementById('message-form');
	const input = document.getElementById('message-input');
	const lastUpdatedEl = document.getElementById('last-updated');
	const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

	let since = null;

	function appendMessage(msg) {
		const isOwn = String(currentUserId) === String(msg.senderId);
		const wrapper = document.createElement('div');
		wrapper.className = `d-flex mb-2 ${isOwn ? 'justify-content-end' : 'justify-content-start'}`;
		const bubble = document.createElement('div');
		bubble.className = `p-2 rounded ${isOwn ? 'bg-primary text-white' : 'bg-white border'}`;
		bubble.style.maxWidth = '75%';
		bubble.innerHTML = `<div>${msg.body.replace(/</g, '&lt;').replace(/>/g, '&gt;')}</div><div class="text-end"><small class="text-muted">${new Date(msg.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}${msg.readAt ? ' âœ“' : ''}</small></div>`;
		wrapper.appendChild(bubble);
		list.appendChild(wrapper);
		list.scrollTop = list.scrollHeight;
	}

	async function fetchMessages() {
		try {
			const url = new URL('/api/chat/messages', window.location.origin);
			url.searchParams.set('conversationId', conversationId);
			if (since) url.searchParams.set('since', since);
			const res = await fetch(url.toString(), { credentials: 'same-origin' });
			if (!res.ok) return;
			const data = await res.json();
			(data.messages || []).forEach(appendMessage);
			if (data.now) since = data.now;
			lastUpdatedEl.textContent = `Updated ${new Date().toLocaleTimeString()}`;
			await fetch('/api/chat/mark-read', { method: 'POST', headers: { 'Content-Type': 'application/json', 'X-CSRF-Token': csrfToken || '' }, body: JSON.stringify({ conversationId }) });
		} catch (e) { /* ignore */ }
	}

	form.addEventListener('submit', async (e) => {
		e.preventDefault();
		const body = input.value.trim();
		if (!body) return;
		input.value = '';
		await fetch('/api/chat/messages', { method: 'POST', headers: { 'Content-Type': 'application/json', 'X-CSRF-Token': csrfToken || '' }, body: JSON.stringify({ conversationId, body }) });
		fetchMessages();
	});

	// initial load
	fetchMessages();
	setInterval(fetchMessages, 3000);
})();
</script>

